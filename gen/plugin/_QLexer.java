/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package plugin;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static plugin.psi.QTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QLexer.flex</tt>
 */
public class _QLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MINUS = 2;
  public static final int DERIVED_LAMBDA = 4;
  public static final int ESCAPE = 6;
  public static final int COMMAND = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\4\1\5\1\2\22\0\1\1\1\32\1\30\4\32\1\33\1\43\1\44\1\32\1\25"+
    "\1\32\1\21\1\16\1\6\1\22\6\14\3\11\1\15\1\45\5\32\4\12\1\23\3\12\1\26\4\12"+
    "\1\26\14\12\1\34\1\7\1\46\1\35\1\13\1\31\1\12\2\20\1\17\1\24\1\37\1\20\1\42"+
    "\1\36\1\20\1\12\1\10\1\20\1\27\1\40\1\20\2\12\4\20\1\41\1\20\1\12\1\20\1\47"+
    "\1\32\1\50\1\32\6\0\1\4\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\1\1\10\1\1\1\11\1\10\1\1\1\10\1\1"+
    "\1\10\1\4\1\12\1\13\2\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\5\2\7\1\22\1\23\1\5"+
    "\2\24\1\3\1\25\1\26\1\7\1\27\2\30\1\7"+
    "\1\31\1\0\2\1\1\32\1\1\1\0\2\33\1\0"+
    "\1\34\1\0\1\35\1\1\1\31\1\0\1\1\1\36"+
    "\1\0\1\36\1\1\2\0\1\37\3\12\1\0\1\40"+
    "\2\1\1\41\1\42\1\43\1\44\1\45\1\0\3\26"+
    "\1\7\1\27\1\46\1\47\1\50\1\23\2\51\1\7"+
    "\1\52\1\0\1\52\2\1\1\32\1\36\1\0\1\34"+
    "\1\53\1\54\1\53\4\55\1\53\1\56\1\0\2\36"+
    "\2\0\1\57\1\60\2\0\1\12\3\40\1\0\1\61"+
    "\1\1\1\41\1\43\1\45\1\47\1\62\1\51\1\63"+
    "\1\51\1\0\3\52\1\36\1\0\1\64\2\0\1\40"+
    "\1\1\1\63\2\52\1\1\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\366"+
    "\0\u03af\0\u03d8\0\366\0\u0401\0\366\0\u042a\0\366\0\u0453"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\366"+
    "\0\u059b\0\366\0\u05c4\0\u05ed\0\366\0\u0616\0\366\0\u063f"+
    "\0\366\0\u0668\0\u0691\0\u06ba\0\366\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\366\0\u0802\0\u0787\0\u07b0"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\366"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\366\0\u0a92\0\366\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\366"+
    "\0\u0b5f\0\u0b0d\0\366\0\u0b88\0\u0bb1\0\366\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d22"+
    "\0\u0d4b\0\366\0\u0735\0\366\0\366\0\366\0\u070c\0\u063f"+
    "\0\u0787\0\u01c3\0\366\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\366\0\366\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e"+
    "\0\u0f37\0\366\0\u0f60\0\366\0\366\0\366\0\u0f89\0\366"+
    "\0\u0fb2\0\u0c03\0\366\0\u0fdb\0\366\0\u1004\0\u102d\0\u1056"+
    "\0\u107f\0\366\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\366\0\u114c"+
    "\0\u1175\0\u119e\0\366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\7\1\10\1\12\1\13\1\14"+
    "\1\15\1\14\1\16\1\17\1\20\1\21\1\22\1\14"+
    "\1\23\1\24\2\14\1\25\2\14\1\26\1\27\1\25"+
    "\1\12\1\30\1\25\1\31\2\14\1\32\1\14\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\7\1\41\2\11"+
    "\1\7\1\41\1\42\1\43\1\14\1\15\1\14\1\16"+
    "\1\17\1\20\1\21\1\22\1\14\1\23\1\24\2\14"+
    "\1\25\2\14\1\26\1\27\1\25\1\12\1\30\1\25"+
    "\1\31\2\14\1\32\1\14\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\21\0\1\44\35\0\2\45\23\0\1\45"+
    "\15\0\4\5\2\0\43\5\1\0\1\46\1\47\1\50"+
    "\1\0\1\46\2\0\5\51\1\0\3\51\1\0\3\51"+
    "\1\0\2\51\5\0\1\52\5\51\60\0\1\10\3\0"+
    "\1\10\1\53\44\0\2\11\53\0\2\12\5\0\1\54"+
    "\15\0\1\12\1\55\16\0\1\56\1\57\2\0\2\12"+
    "\5\0\1\54\15\0\1\12\1\55\22\0\2\60\5\14"+
    "\1\61\3\14\1\0\3\14\1\0\2\14\3\0\1\60"+
    "\2\0\5\14\7\0\1\62\3\0\1\62\2\60\1\63"+
    "\1\15\2\63\1\15\1\0\1\64\2\63\1\65\1\15"+
    "\2\66\1\0\2\63\3\0\1\60\2\0\5\63\7\0"+
    "\1\67\3\0\1\67\2\60\3\70\1\71\1\70\1\72"+
    "\1\71\2\70\1\73\3\70\1\0\2\70\3\0\1\60"+
    "\2\0\5\70\7\0\1\62\3\0\1\62\2\60\1\63"+
    "\1\15\2\63\1\15\1\74\1\64\2\63\1\65\1\15"+
    "\2\66\1\0\2\63\3\0\1\60\2\0\5\63\42\0"+
    "\1\75\15\0\1\67\3\0\1\67\2\60\3\14\1\76"+
    "\1\14\1\77\1\76\2\14\1\100\3\14\1\0\2\14"+
    "\3\0\1\60\2\0\5\14\14\0\2\60\5\14\1\61"+
    "\3\14\1\0\3\14\1\0\2\14\3\0\1\60\2\0"+
    "\2\14\1\101\2\14\7\0\1\67\3\0\1\67\2\60"+
    "\1\0\1\102\1\0\1\103\1\102\1\72\1\103\2\0"+
    "\1\100\1\104\10\0\1\60\16\0\1\62\3\0\1\62"+
    "\2\60\5\63\1\74\1\64\2\63\1\65\1\63\2\66"+
    "\1\0\2\105\3\0\1\60\2\0\1\105\4\63\7\0"+
    "\1\67\3\0\1\67\2\60\3\0\1\103\1\0\1\72"+
    "\1\103\2\0\1\100\11\0\1\60\15\0\7\106\1\107"+
    "\20\106\1\110\20\106\1\0\1\111\2\112\1\0\1\111"+
    "\2\0\5\113\1\0\3\113\1\0\3\113\1\0\2\113"+
    "\1\114\1\115\4\0\5\113\14\0\2\60\5\14\1\61"+
    "\3\14\1\0\3\14\1\0\2\14\3\0\1\60\2\0"+
    "\1\14\1\116\3\14\14\0\2\60\5\14\1\61\3\14"+
    "\1\0\3\14\1\0\2\14\3\0\1\60\2\0\4\14"+
    "\1\117\14\0\2\120\11\0\1\121\11\0\1\120\23\0"+
    "\2\122\11\0\1\123\11\0\1\122\23\0\2\124\23\0"+
    "\1\124\16\0\1\41\3\0\1\41\1\53\1\125\41\0"+
    "\2\126\1\127\1\130\2\126\2\42\5\126\1\131\15\126"+
    "\1\42\1\132\14\126\2\0\1\56\1\57\2\0\2\12"+
    "\1\133\4\0\1\54\1\0\1\133\13\0\1\12\1\55"+
    "\22\0\2\134\5\0\1\135\15\0\1\134\32\0\1\136"+
    "\34\0\1\46\3\0\1\46\46\0\1\50\55\0\5\51"+
    "\1\0\3\51\1\0\3\51\1\0\2\51\6\0\5\51"+
    "\6\0\2\53\1\137\1\140\45\53\6\0\2\12\23\0"+
    "\1\12\1\55\17\0\1\57\53\0\2\60\5\0\1\141"+
    "\15\0\1\60\16\0\1\62\3\0\1\62\3\0\1\142"+
    "\2\0\1\142\4\0\1\143\1\144\34\0\2\60\5\63"+
    "\1\0\3\63\1\0\3\63\1\0\2\63\3\0\1\60"+
    "\2\0\5\63\14\0\2\60\1\63\1\145\2\63\1\145"+
    "\1\0\3\63\1\0\1\145\2\63\1\0\2\63\3\0"+
    "\1\60\2\0\5\63\7\0\1\62\3\0\1\62\2\60"+
    "\1\63\1\146\2\63\1\146\1\0\3\63\1\147\1\146"+
    "\2\63\1\150\2\63\3\0\1\60\2\0\5\63\7\0"+
    "\1\67\3\0\1\67\7\0\1\151\41\0\2\60\5\70"+
    "\1\0\3\70\1\152\3\70\1\0\2\70\3\0\1\60"+
    "\2\0\5\70\14\0\2\60\1\153\1\70\1\153\2\70"+
    "\1\0\1\70\2\153\1\152\1\70\2\153\1\0\2\153"+
    "\3\0\1\60\2\0\5\153\6\0\6\154\2\60\23\154"+
    "\1\60\1\0\14\154\11\0\1\155\2\0\1\155\5\0"+
    "\1\155\26\0\1\156\1\157\3\156\1\157\2\160\5\156"+
    "\1\161\15\156\1\160\1\0\14\156\6\0\2\60\1\162"+
    "\1\14\1\162\2\14\1\61\1\14\2\162\1\0\1\14"+
    "\2\162\1\0\2\162\3\0\1\60\2\0\5\162\14\0"+
    "\2\60\5\14\1\61\3\14\1\0\3\14\1\0\2\14"+
    "\3\0\1\60\1\163\1\0\5\14\7\0\1\62\3\0"+
    "\1\62\3\0\1\102\2\0\1\102\1\0\1\164\2\0"+
    "\1\65\1\102\2\165\34\0\1\155\1\0\1\155\4\0"+
    "\2\155\2\0\2\155\1\0\2\155\6\0\5\155\7\0"+
    "\1\62\3\0\1\62\10\0\1\164\2\0\1\65\1\0"+
    "\2\165\1\0\2\166\6\0\1\166\13\0\1\62\3\0"+
    "\1\62\2\60\5\63\1\0\3\63\1\65\3\63\1\0"+
    "\2\63\3\0\1\60\2\0\5\63\6\0\7\167\1\170"+
    "\20\167\1\171\20\167\1\106\1\0\47\106\1\0\1\111"+
    "\2\112\1\0\1\111\1\172\22\0\1\115\20\0\1\111"+
    "\2\112\1\0\1\111\23\0\1\115\20\0\1\173\3\0"+
    "\1\173\2\0\5\113\1\0\3\113\1\0\3\113\1\0"+
    "\2\113\1\0\1\115\4\0\5\113\6\0\7\114\1\174"+
    "\20\114\1\175\20\114\1\0\1\176\2\177\1\0\1\176"+
    "\2\0\5\200\1\0\3\200\1\0\3\200\1\0\2\200"+
    "\1\201\1\115\4\0\5\200\14\0\2\60\5\14\1\61"+
    "\3\14\1\0\3\14\1\0\2\14\3\0\1\60\1\202"+
    "\1\0\5\14\14\0\2\60\5\14\1\61\3\14\1\0"+
    "\3\14\1\0\2\14\3\0\1\60\2\0\1\203\4\14"+
    "\23\0\1\204\50\0\1\205\50\0\1\206\43\0\1\133"+
    "\6\0\1\133\31\0\2\126\1\127\1\130\45\126\3\0"+
    "\1\130\45\0\2\126\1\127\1\130\2\126\2\42\23\126"+
    "\1\42\1\132\14\126\6\0\2\134\5\0\1\207\15\0"+
    "\1\134\23\0\2\134\23\0\1\134\1\210\16\0\1\211"+
    "\1\212\47\0\1\211\1\213\53\0\2\60\23\0\1\60"+
    "\16\0\1\62\3\0\1\62\3\0\1\142\2\0\1\142"+
    "\1\0\1\214\2\215\1\0\1\142\2\216\2\0\1\215"+
    "\6\0\2\215\2\0\1\215\17\0\1\142\2\0\1\142"+
    "\5\0\1\144\27\0\1\62\3\0\1\62\10\0\1\214"+
    "\2\215\2\0\2\216\1\0\2\217\6\0\1\217\1\215"+
    "\2\0\1\215\7\0\1\62\3\0\1\62\2\60\1\63"+
    "\1\145\2\63\1\145\1\0\3\63\1\65\1\145\2\66"+
    "\1\0\2\63\3\0\1\60\2\0\5\63\7\0\1\62"+
    "\3\0\1\62\2\60\1\63\1\146\2\63\1\146\1\0"+
    "\3\63\1\65\1\146\2\63\1\0\2\63\3\0\1\60"+
    "\2\0\5\63\7\0\1\62\3\0\1\62\3\0\1\150"+
    "\2\0\1\150\4\0\1\65\1\150\26\0\34\154\1\0"+
    "\14\154\11\0\1\220\2\0\1\220\5\0\1\220\27\0"+
    "\1\62\3\0\1\62\3\0\1\150\2\0\1\150\4\0"+
    "\1\147\1\150\2\0\1\150\24\0\1\62\3\0\1\62"+
    "\13\0\1\65\27\0\7\167\1\170\20\167\1\110\21\167"+
    "\1\0\47\167\1\0\1\221\3\0\1\221\1\172\22\0"+
    "\1\115\17\0\1\114\1\0\47\114\1\0\1\173\3\0"+
    "\1\173\23\0\1\115\20\0\1\176\2\177\1\0\1\176"+
    "\1\222\22\0\1\115\20\0\1\176\2\177\1\0\1\176"+
    "\23\0\1\115\20\0\1\223\3\0\1\223\2\0\5\200"+
    "\1\0\3\200\1\0\3\200\1\0\2\200\1\0\1\115"+
    "\4\0\5\200\6\0\7\201\1\224\20\201\1\225\20\201"+
    "\6\0\2\60\1\226\4\14\1\61\3\14\1\0\3\14"+
    "\1\0\2\14\3\0\1\60\2\0\5\14\14\0\2\134"+
    "\23\0\1\134\20\0\1\227\56\0\1\230\2\0\1\230"+
    "\5\0\1\230\27\0\1\62\3\0\1\62\3\0\1\231"+
    "\2\0\1\231\2\0\2\215\2\231\1\0\1\215\1\231"+
    "\1\0\1\215\6\0\2\215\2\0\1\215\7\0\1\62"+
    "\3\0\1\62\11\0\2\215\3\0\1\215\2\0\1\215"+
    "\6\0\2\215\2\0\1\215\7\0\1\62\3\0\1\62"+
    "\3\0\1\220\2\0\1\220\4\0\1\65\1\220\2\165"+
    "\25\0\1\221\3\0\1\221\23\0\1\115\20\0\1\221"+
    "\3\0\1\221\1\222\22\0\1\115\17\0\1\201\1\0"+
    "\47\201\1\0\1\223\3\0\1\223\23\0\1\115\25\0"+
    "\2\60\5\14\1\61\3\14\1\0\2\14\1\232\1\0"+
    "\2\14\3\0\1\60\2\0\5\14\7\0\1\62\3\0"+
    "\1\62\3\0\1\230\2\0\1\230\2\0\2\215\1\0"+
    "\1\230\2\216\2\0\1\215\6\0\2\215\2\0\1\215"+
    "\7\0\1\62\3\0\1\62\3\0\1\231\2\0\1\231"+
    "\2\0\2\215\1\0\1\231\1\0\1\215\2\0\1\215"+
    "\6\0\2\215\2\0\1\215\14\0\2\60\5\14\1\61"+
    "\3\14\1\0\3\14\1\0\2\14\3\0\1\60\1\233"+
    "\1\0\5\14\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4551];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\0\2\1\1\11\20\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\10\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\0\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\2\1\1\0\2\1\2\0\1\11\3\1"+
    "\1\0\4\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\2\1\1\11\2\1\1\11\4\1\1\0\5\1"+
    "\1\0\1\11\1\1\3\11\4\1\1\11\1\0\2\1"+
    "\2\0\2\11\2\0\4\1\1\0\1\11\1\1\3\11"+
    "\1\1\1\11\2\1\1\11\1\0\1\11\3\1\1\0"+
    "\1\11\2\0\2\1\1\11\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return USER_IDENTIFIER;
            }
          case 54: break;
          case 2: 
            { yybegin(YYINITIAL); return COMMENT;
            }
          case 55: break;
          case 3: 
            { yybegin(YYINITIAL); return USER_IDENTIFIER;
            }
          case 56: break;
          case 4: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 57: break;
          case 5: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 58: break;
          case 6: 
            { return NEWLINE;
            }
          case 59: break;
          case 7: 
            { return DERIVED_VERB;
            }
          case 60: break;
          case 8: 
            { return VERB;
            }
          case 61: break;
          case 9: 
            { return COLON;
            }
          case 62: break;
          case 10: 
            { return SYMBOL;
            }
          case 63: break;
          case 11: 
            { return OPEN_BRACKET;
            }
          case 64: break;
          case 12: 
            { return OPEN_PAREN;
            }
          case 65: break;
          case 13: 
            { return CLOSE_PAREN;
            }
          case 66: break;
          case 14: 
            { return SEMICOLON;
            }
          case 67: break;
          case 15: 
            { return CLOSE_BRACKET;
            }
          case 68: break;
          case 16: 
            { return OPEN_BRACE;
            }
          case 69: break;
          case 17: 
            { return CLOSE_BRACE;
            }
          case 70: break;
          case 18: 
            { yybegin(YYINITIAL); return VERB;
            }
          case 71: break;
          case 19: 
            { yybegin(YYINITIAL); return ADVERB;
            }
          case 72: break;
          case 20: 
            { yybegin(YYINITIAL); return NEWLINE;
            }
          case 73: break;
          case 21: 
            { yybegin(YYINITIAL); return CARET;
            }
          case 74: break;
          case 22: 
            { return COMMENT;
            }
          case 75: break;
          case 23: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return ADVERB;
            }
          case 76: break;
          case 24: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(ESCAPE); return COMMENT;
            }
          case 77: break;
          case 25: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return USER_ASSIGNMENT;
            }
          case 78: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MINUS); return NUMBER;
            }
          case 79: break;
          case 27: 
            { return SYSTEM_IDENTIFIER;
            }
          case 80: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MINUS); return SYSTEM_IDENTIFIER;
            }
          case 81: break;
          case 29: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return COLON;
            }
          case 82: break;
          case 30: 
            { return NUMBER;
            }
          case 83: break;
          case 31: 
            { return STRING;
            }
          case 84: break;
          case 32: 
            { return SYMBOL_VECTOR;
            }
          case 85: break;
          case 33: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_PAREN;
            }
          case 86: break;
          case 34: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MINUS); return CLOSE_PAREN;
            }
          case 87: break;
          case 35: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_BRACKET;
            }
          case 88: break;
          case 36: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MINUS); return CLOSE_BRACKET;
            }
          case 89: break;
          case 37: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_BRACE;
            }
          case 90: break;
          case 38: 
            { yybegin(COMMAND); return COMMAND_NAME;
            }
          case 91: break;
          case 39: 
            { yybegin(YYINITIAL); return DERIVED_VERB;
            }
          case 92: break;
          case 40: 
            { yybegin(YYINITIAL); return COMPOSED_MONAD;
            }
          case 93: break;
          case 41: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return COMMENT;
            }
          case 94: break;
          case 42: 
            { return NUMBER_VECTOR;
            }
          case 95: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return VERB;
            }
          case 96: break;
          case 44: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return COMPOSED_MONAD;
            }
          case 97: break;
          case 45: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return N_COLON;
            }
          case 98: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return DO;
            }
          case 99: break;
          case 47: 
            { return CHAR;
            }
          case 100: break;
          case 48: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return SYMBOL;
            }
          case 101: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return IF;
            }
          case 102: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(YYINITIAL); return VERB;
            }
          case 103: break;
          case 51: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return COMMENT;
            }
          case 104: break;
          case 52: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return SYMBOL_VECTOR;
            }
          case 105: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return WHILE;
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
