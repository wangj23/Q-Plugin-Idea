/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package plugin;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static plugin.psi.QTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QLexer.flex</tt>
 */
public class _QLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MINUS = 2;
  public static final int DERIVED_LAMBDA = 4;
  public static final int ESCAPE = 6;
  public static final int COMMAND = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\4\1\5\1\2\22\0\1\1\1\32\1\30\1\32\1\43\2\32\1\33\1\44\1\45"+
    "\1\32\1\25\1\32\1\21\1\16\1\6\1\22\6\14\3\11\1\15\1\46\5\32\4\12\1\23\3\12"+
    "\1\26\4\12\1\26\14\12\1\34\1\7\1\47\1\35\1\13\1\31\1\12\2\20\1\17\1\24\1\37"+
    "\1\20\1\42\1\36\1\20\1\12\1\10\1\20\1\27\1\40\1\20\2\12\4\20\1\41\1\20\1\12"+
    "\1\20\1\50\1\32\1\51\1\32\6\0\1\4\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\1\1\10\1\1\1\11\1\10\1\1\1\10\1\1"+
    "\1\10\1\4\1\12\1\13\2\1\1\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\5\2\7\1\22\1\23"+
    "\1\5\2\24\1\3\1\25\1\26\1\7\1\27\2\30"+
    "\1\7\1\31\1\0\2\1\1\32\1\1\1\0\2\33"+
    "\1\0\1\34\1\0\1\35\1\1\1\31\1\0\1\1"+
    "\1\36\1\0\1\36\1\1\2\0\1\37\3\12\1\0"+
    "\1\40\2\1\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\0\3\26\1\7\1\27\1\47\1\50\1\51\1\23"+
    "\2\52\1\7\1\53\1\0\1\53\2\1\1\32\1\36"+
    "\1\0\1\34\1\54\1\55\1\54\4\56\1\54\1\57"+
    "\1\0\2\36\2\0\1\60\1\61\2\0\1\12\3\40"+
    "\1\0\1\62\1\1\1\42\1\44\1\46\1\50\1\63"+
    "\1\52\1\64\1\52\1\0\3\53\1\36\1\0\1\65"+
    "\2\0\1\40\1\1\1\64\2\53\1\1\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\374"+
    "\0\u03c6\0\u03f0\0\u041a\0\374\0\u0444\0\374\0\u046e\0\374"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be"+
    "\0\374\0\u05e8\0\374\0\u0612\0\u063c\0\374\0\u0666\0\374"+
    "\0\u0690\0\374\0\u06ba\0\u06e4\0\u070e\0\374\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\374\0\u085e\0\u07e0"+
    "\0\u080a\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\374\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\374\0\u0ad4\0\374\0\u0afe\0\374\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\374\0\u0bd0\0\u0b7c\0\374\0\u0bfa\0\u0c24\0\374"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74"+
    "\0\u0d9e\0\u0d9e\0\u0dc8\0\374\0\u078c\0\374\0\374\0\374"+
    "\0\u0762\0\u0690\0\u07e0\0\u01ce\0\374\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\374\0\374\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
    "\0\u0f6c\0\u0f96\0\u0fc0\0\374\0\u0fea\0\374\0\374\0\374"+
    "\0\u1014\0\374\0\u103e\0\u0c78\0\374\0\u1068\0\374\0\u1092"+
    "\0\u10bc\0\u10e6\0\u1110\0\374\0\u113a\0\u1164\0\u118e\0\u11b8"+
    "\0\374\0\u11e2\0\u120c\0\u1236\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\7\1\10\1\12\1\13\1\14"+
    "\1\15\1\14\1\16\1\17\1\20\1\21\1\22\1\14"+
    "\1\23\1\24\2\14\1\25\2\14\1\26\1\27\1\25"+
    "\1\12\1\30\1\25\1\31\2\14\1\32\1\14\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\7\1\42"+
    "\2\11\1\7\1\42\1\43\1\44\1\14\1\15\1\14"+
    "\1\16\1\17\1\20\1\21\1\22\1\14\1\23\1\24"+
    "\2\14\1\25\2\14\1\26\1\27\1\25\1\12\1\30"+
    "\1\25\1\31\2\14\1\32\1\14\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\21\0\1\45\36\0\2\46"+
    "\23\0\1\46\16\0\4\5\2\0\44\5\1\0\1\47"+
    "\1\50\1\51\1\0\1\47\2\0\5\52\1\0\3\52"+
    "\1\0\3\52\1\0\2\52\5\0\1\53\5\52\62\0"+
    "\1\10\3\0\1\10\1\54\45\0\2\11\54\0\2\12"+
    "\5\0\1\55\15\0\1\12\1\56\17\0\1\57\1\60"+
    "\2\0\2\12\5\0\1\55\15\0\1\12\1\56\23\0"+
    "\2\61\5\14\1\62\3\14\1\0\3\14\1\0\2\14"+
    "\3\0\1\61\2\0\5\14\10\0\1\63\3\0\1\63"+
    "\2\61\1\64\1\15\2\64\1\15\1\0\1\65\2\64"+
    "\1\66\1\15\2\67\1\0\2\64\3\0\1\61\2\0"+
    "\5\64\10\0\1\70\3\0\1\70\2\61\3\71\1\72"+
    "\1\71\1\73\1\72\2\71\1\74\3\71\1\0\2\71"+
    "\3\0\1\61\2\0\5\71\10\0\1\63\3\0\1\63"+
    "\2\61\1\64\1\15\2\64\1\15\1\75\1\65\2\64"+
    "\1\66\1\15\2\67\1\0\2\64\3\0\1\61\2\0"+
    "\5\64\43\0\1\76\16\0\1\70\3\0\1\70\2\61"+
    "\3\14\1\77\1\14\1\100\1\77\2\14\1\101\3\14"+
    "\1\0\2\14\3\0\1\61\2\0\5\14\15\0\2\61"+
    "\5\14\1\62\3\14\1\0\3\14\1\0\2\14\3\0"+
    "\1\61\2\0\2\14\1\102\2\14\10\0\1\70\3\0"+
    "\1\70\2\61\1\0\1\103\1\0\1\104\1\103\1\73"+
    "\1\104\2\0\1\101\1\105\10\0\1\61\17\0\1\63"+
    "\3\0\1\63\2\61\5\64\1\75\1\65\2\64\1\66"+
    "\1\64\2\67\1\0\2\106\3\0\1\61\2\0\1\106"+
    "\4\64\10\0\1\70\3\0\1\70\2\61\3\0\1\104"+
    "\1\0\1\73\1\104\2\0\1\101\11\0\1\61\16\0"+
    "\7\107\1\110\20\107\1\111\21\107\1\0\1\112\2\113"+
    "\1\0\1\112\2\0\5\114\1\0\3\114\1\0\3\114"+
    "\1\0\2\114\1\115\1\116\4\0\5\114\15\0\2\61"+
    "\5\14\1\62\3\14\1\0\3\14\1\0\2\14\3\0"+
    "\1\61\2\0\1\14\1\117\3\14\15\0\2\61\5\14"+
    "\1\62\3\14\1\0\3\14\1\0\2\14\3\0\1\61"+
    "\2\0\4\14\1\120\10\0\1\70\3\0\1\70\2\61"+
    "\3\0\1\104\1\0\1\73\1\104\2\0\1\101\11\0"+
    "\1\61\1\121\23\0\2\122\11\0\1\123\11\0\1\122"+
    "\24\0\2\124\11\0\1\125\11\0\1\124\24\0\2\126"+
    "\23\0\1\126\17\0\1\42\3\0\1\42\1\54\1\127"+
    "\42\0\2\130\1\131\1\132\2\130\2\43\5\130\1\133"+
    "\15\130\1\43\1\134\15\130\2\0\1\57\1\60\2\0"+
    "\2\12\1\135\4\0\1\55\1\0\1\135\13\0\1\12"+
    "\1\56\23\0\2\136\5\0\1\137\15\0\1\136\33\0"+
    "\1\140\35\0\1\47\3\0\1\47\47\0\1\51\56\0"+
    "\5\52\1\0\3\52\1\0\3\52\1\0\2\52\6\0"+
    "\5\52\7\0\2\54\1\141\1\142\46\54\6\0\2\12"+
    "\23\0\1\12\1\56\20\0\1\60\54\0\2\61\5\0"+
    "\1\143\15\0\1\61\17\0\1\63\3\0\1\63\3\0"+
    "\1\144\2\0\1\144\4\0\1\145\1\146\35\0\2\61"+
    "\5\64\1\0\3\64\1\0\3\64\1\0\2\64\3\0"+
    "\1\61\2\0\5\64\15\0\2\61\1\64\1\147\2\64"+
    "\1\147\1\0\3\64\1\0\1\147\2\64\1\0\2\64"+
    "\3\0\1\61\2\0\5\64\10\0\1\63\3\0\1\63"+
    "\2\61\1\64\1\150\2\64\1\150\1\0\3\64\1\151"+
    "\1\150\2\64\1\152\2\64\3\0\1\61\2\0\5\64"+
    "\10\0\1\70\3\0\1\70\7\0\1\153\42\0\2\61"+
    "\5\71\1\0\3\71\1\154\3\71\1\0\2\71\3\0"+
    "\1\61\2\0\5\71\15\0\2\61\1\155\1\71\1\155"+
    "\2\71\1\0\1\71\2\155\1\154\1\71\2\155\1\0"+
    "\2\155\3\0\1\61\2\0\5\155\7\0\6\156\2\61"+
    "\23\156\1\61\1\0\15\156\11\0\1\157\2\0\1\157"+
    "\5\0\1\157\27\0\1\160\1\161\3\160\1\161\2\162"+
    "\5\160\1\163\15\160\1\162\1\0\15\160\6\0\2\61"+
    "\1\164\1\14\1\164\2\14\1\62\1\14\2\164\1\0"+
    "\1\14\2\164\1\0\2\164\3\0\1\61\2\0\5\164"+
    "\15\0\2\61\5\14\1\62\3\14\1\0\3\14\1\0"+
    "\2\14\3\0\1\61\1\165\1\0\5\14\10\0\1\63"+
    "\3\0\1\63\3\0\1\103\2\0\1\103\1\0\1\166"+
    "\2\0\1\66\1\103\2\167\35\0\1\157\1\0\1\157"+
    "\4\0\2\157\2\0\2\157\1\0\2\157\6\0\5\157"+
    "\10\0\1\63\3\0\1\63\10\0\1\166\2\0\1\66"+
    "\1\0\2\167\1\0\2\170\6\0\1\170\14\0\1\63"+
    "\3\0\1\63\2\61\5\64\1\0\3\64\1\66\3\64"+
    "\1\0\2\64\3\0\1\61\2\0\5\64\7\0\7\171"+
    "\1\172\20\171\1\173\21\171\1\107\1\0\50\107\1\0"+
    "\1\112\2\113\1\0\1\112\1\174\22\0\1\116\21\0"+
    "\1\112\2\113\1\0\1\112\23\0\1\116\21\0\1\175"+
    "\3\0\1\175\2\0\5\114\1\0\3\114\1\0\3\114"+
    "\1\0\2\114\1\0\1\116\4\0\5\114\7\0\7\115"+
    "\1\176\20\115\1\177\21\115\1\0\1\200\2\201\1\0"+
    "\1\200\2\0\5\202\1\0\3\202\1\0\3\202\1\0"+
    "\2\202\1\203\1\116\4\0\5\202\15\0\2\61\5\14"+
    "\1\62\3\14\1\0\3\14\1\0\2\14\3\0\1\61"+
    "\1\204\1\0\5\14\15\0\2\61\5\14\1\62\3\14"+
    "\1\0\3\14\1\0\2\14\3\0\1\61\2\0\1\205"+
    "\4\14\24\0\1\206\51\0\1\207\51\0\1\210\44\0"+
    "\1\135\6\0\1\135\32\0\2\130\1\131\1\132\46\130"+
    "\3\0\1\132\46\0\2\130\1\131\1\132\2\130\2\43"+
    "\23\130\1\43\1\134\15\130\6\0\2\136\5\0\1\211"+
    "\15\0\1\136\24\0\2\136\23\0\1\136\1\212\17\0"+
    "\1\213\1\214\50\0\1\213\1\215\54\0\2\61\23\0"+
    "\1\61\17\0\1\63\3\0\1\63\3\0\1\144\2\0"+
    "\1\144\1\0\1\216\2\217\1\0\1\144\2\220\2\0"+
    "\1\217\6\0\2\217\2\0\1\217\20\0\1\144\2\0"+
    "\1\144\5\0\1\146\30\0\1\63\3\0\1\63\10\0"+
    "\1\216\2\217\2\0\2\220\1\0\2\221\6\0\1\221"+
    "\1\217\2\0\1\217\10\0\1\63\3\0\1\63\2\61"+
    "\1\64\1\147\2\64\1\147\1\0\3\64\1\66\1\147"+
    "\2\67\1\0\2\64\3\0\1\61\2\0\5\64\10\0"+
    "\1\63\3\0\1\63\2\61\1\64\1\150\2\64\1\150"+
    "\1\0\3\64\1\66\1\150\2\64\1\0\2\64\3\0"+
    "\1\61\2\0\5\64\10\0\1\63\3\0\1\63\3\0"+
    "\1\152\2\0\1\152\4\0\1\66\1\152\27\0\34\156"+
    "\1\0\15\156\11\0\1\222\2\0\1\222\5\0\1\222"+
    "\30\0\1\63\3\0\1\63\3\0\1\152\2\0\1\152"+
    "\4\0\1\151\1\152\2\0\1\152\25\0\1\63\3\0"+
    "\1\63\13\0\1\66\30\0\7\171\1\172\20\171\1\111"+
    "\22\171\1\0\50\171\1\0\1\223\3\0\1\223\1\174"+
    "\22\0\1\116\20\0\1\115\1\0\50\115\1\0\1\175"+
    "\3\0\1\175\23\0\1\116\21\0\1\200\2\201\1\0"+
    "\1\200\1\224\22\0\1\116\21\0\1\200\2\201\1\0"+
    "\1\200\23\0\1\116\21\0\1\225\3\0\1\225\2\0"+
    "\5\202\1\0\3\202\1\0\3\202\1\0\2\202\1\0"+
    "\1\116\4\0\5\202\7\0\7\203\1\226\20\203\1\227"+
    "\21\203\6\0\2\61\1\230\4\14\1\62\3\14\1\0"+
    "\3\14\1\0\2\14\3\0\1\61\2\0\5\14\15\0"+
    "\2\136\23\0\1\136\21\0\1\231\57\0\1\232\2\0"+
    "\1\232\5\0\1\232\30\0\1\63\3\0\1\63\3\0"+
    "\1\233\2\0\1\233\2\0\2\217\2\233\1\0\1\217"+
    "\1\233\1\0\1\217\6\0\2\217\2\0\1\217\10\0"+
    "\1\63\3\0\1\63\11\0\2\217\3\0\1\217\2\0"+
    "\1\217\6\0\2\217\2\0\1\217\10\0\1\63\3\0"+
    "\1\63\3\0\1\222\2\0\1\222\4\0\1\66\1\222"+
    "\2\167\26\0\1\223\3\0\1\223\23\0\1\116\21\0"+
    "\1\223\3\0\1\223\1\224\22\0\1\116\20\0\1\203"+
    "\1\0\50\203\1\0\1\225\3\0\1\225\23\0\1\116"+
    "\26\0\2\61\5\14\1\62\3\14\1\0\2\14\1\234"+
    "\1\0\2\14\3\0\1\61\2\0\5\14\10\0\1\63"+
    "\3\0\1\63\3\0\1\232\2\0\1\232\2\0\2\217"+
    "\1\0\1\232\2\220\2\0\1\217\6\0\2\217\2\0"+
    "\1\217\10\0\1\63\3\0\1\63\3\0\1\233\2\0"+
    "\1\233\2\0\2\217\1\0\1\233\1\0\1\217\2\0"+
    "\1\217\6\0\2\217\2\0\1\217\15\0\2\61\5\14"+
    "\1\62\3\14\1\0\3\14\1\0\2\14\3\0\1\61"+
    "\1\235\1\0\5\14\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4704];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\0\2\1\1\11\20\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\10\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\0\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\2\1\1\0\2\1\2\0\1\11\3\1"+
    "\1\0\3\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\1\11\2\1\1\11\4\1"+
    "\1\0\5\1\1\0\1\11\1\1\3\11\4\1\1\11"+
    "\1\0\2\1\2\0\2\11\2\0\4\1\1\0\1\11"+
    "\1\1\3\11\1\1\1\11\2\1\1\11\1\0\1\11"+
    "\3\1\1\0\1\11\2\0\2\1\1\11\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return USER_IDENTIFIER;
            }
          case 55: break;
          case 2: 
            { yybegin(YYINITIAL); return COMMENT;
            }
          case 56: break;
          case 3: 
            { yybegin(YYINITIAL); return USER_IDENTIFIER;
            }
          case 57: break;
          case 4: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 58: break;
          case 5: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 59: break;
          case 6: 
            { return NEWLINE;
            }
          case 60: break;
          case 7: 
            { return DERIVED_VERB;
            }
          case 61: break;
          case 8: 
            { return VERB;
            }
          case 62: break;
          case 9: 
            { return COLON;
            }
          case 63: break;
          case 10: 
            { return SYMBOL;
            }
          case 64: break;
          case 11: 
            { return OPEN_BRACKET;
            }
          case 65: break;
          case 12: 
            { return OPEN_PAREN;
            }
          case 66: break;
          case 13: 
            { return CLOSE_PAREN;
            }
          case 67: break;
          case 14: 
            { return SEMICOLON;
            }
          case 68: break;
          case 15: 
            { return CLOSE_BRACKET;
            }
          case 69: break;
          case 16: 
            { return OPEN_BRACE;
            }
          case 70: break;
          case 17: 
            { return CLOSE_BRACE;
            }
          case 71: break;
          case 18: 
            { yybegin(YYINITIAL); return VERB;
            }
          case 72: break;
          case 19: 
            { yybegin(YYINITIAL); return ADVERB;
            }
          case 73: break;
          case 20: 
            { yybegin(YYINITIAL); return NEWLINE;
            }
          case 74: break;
          case 21: 
            { yybegin(YYINITIAL); return CARET;
            }
          case 75: break;
          case 22: 
            { return COMMENT;
            }
          case 76: break;
          case 23: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return ADVERB;
            }
          case 77: break;
          case 24: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(ESCAPE); return COMMENT;
            }
          case 78: break;
          case 25: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return USER_ASSIGNMENT;
            }
          case 79: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MINUS); return NUMBER;
            }
          case 80: break;
          case 27: 
            { return SYSTEM_IDENTIFIER;
            }
          case 81: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MINUS); return SYSTEM_IDENTIFIER;
            }
          case 82: break;
          case 29: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return COLON;
            }
          case 83: break;
          case 30: 
            { return NUMBER;
            }
          case 84: break;
          case 31: 
            { return STRING;
            }
          case 85: break;
          case 32: 
            { return SYMBOL_VECTOR;
            }
          case 86: break;
          case 33: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return IFELSE;
            }
          case 87: break;
          case 34: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_PAREN;
            }
          case 88: break;
          case 35: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MINUS); return CLOSE_PAREN;
            }
          case 89: break;
          case 36: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_BRACKET;
            }
          case 90: break;
          case 37: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MINUS); return CLOSE_BRACKET;
            }
          case 91: break;
          case 38: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DERIVED_LAMBDA); return CLOSE_BRACE;
            }
          case 92: break;
          case 39: 
            { yybegin(COMMAND); return COMMAND_NAME;
            }
          case 93: break;
          case 40: 
            { yybegin(YYINITIAL); return DERIVED_VERB;
            }
          case 94: break;
          case 41: 
            { yybegin(YYINITIAL); return COMPOSED_MONAD;
            }
          case 95: break;
          case 42: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return COMMENT;
            }
          case 96: break;
          case 43: 
            { return NUMBER_VECTOR;
            }
          case 97: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return VERB;
            }
          case 98: break;
          case 45: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return COMPOSED_MONAD;
            }
          case 99: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return N_COLON;
            }
          case 100: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return DO;
            }
          case 101: break;
          case 48: 
            { return CHAR;
            }
          case 102: break;
          case 49: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return SYMBOL;
            }
          case 103: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return IF;
            }
          case 104: break;
          case 51: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(YYINITIAL); return VERB;
            }
          case 105: break;
          case 52: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return COMMENT;
            }
          case 106: break;
          case 53: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return SYMBOL_VECTOR;
            }
          case 107: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return WHILE;
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
