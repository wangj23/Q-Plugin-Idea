{
  parserClass="plugin.parser.QParser"
  extends="plugin.QAstWrapperPsiElement"

  psiClassPrefix="Q"
  psiImplClassSuffix="Impl"
  psiPackage="plugin.psi"
  psiImplPackage="plugin.psi.impl"

  elementTypeHolderClass="plugin.psi.QTypes"
  elementTypeClass="plugin.psi.QElementType"
  tokenTypeClass="plugin.psi.QTokenType"

  psiImplUtilClass="plugin.psi.impl.QPsiImplUtil"

  tokens=[

    // ascii chars
    bang='!'
    quote='"'
    hash='#'
    dollar='$'
    percent='`%'
    ampersand='&'
    open_paren='('
    close_paren=')'
    asterisk='*'
    plus='+'
    comma=','
    dash='-'
    period='.'
    colon=':'
    semicolon=';'
    less_than='<'
    equals='='
    greater_than='>'
    question_mark='?'
    at='@'
    open_bracket='['
    close_bracket=']'
    caret='^'
    underscore='_'
    back_tick='`'
    open_brace='{'
    pipe='|'
    close_brace='}'
    tilde='~'
    whitespace=' '

    verb="regexp:[!#$%&*+,-.<=>?@\^_|~]"

    // adverbs
    slash='/'
    slash_colon='/:'
    back_slash='\'
    back_slash_colon='\:'
    tick="'"
    tick_colon="':"
    adverb="regexp:/ | /: | \\ | \\: | ' | ':"
    composed_monad="composed_monad"
    derived_verb="derived_verb"

    // names
    user_identifier='regexp:[._a-zA-Z0-9]*'
    user_assignment='regexp:[.a-zA-Z0-9][._a-zA-Z0-9]*'
    system_identifier='regexp:_[._a-zA-Z0-9]*|[0-6]:'

    // nouns
    number='regexp:((0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?|0[iInN])'
    char='regexp:"(\\"|[^"])"'
    string='regexp:"(\\"|[^"])*"'
    symbol='regexp:`[._a-zA-Z]*'
    symbol_vector="symbol_vector"
    number_vector="number_vector"

    // commands
    command_name='regexp:\s*\\[dl]'

    // i/o, dynamic load and client/server
    n_colon='regexp:[0-6]:'

    // control
    if="if"
    do="do"
    while="while"

    // punctuation
    newline='regexp:\r|\n|\r\n'
    comment='regexp:/.*'
  ]
}

root ::= E0 + separator_or_eof
private E0 ::= command
             | E1
             | C0
private E1 ::= separator
             | expression
private E2 ::= separator
             | E3
private E3 ::= expression
             | C0
private C0 ::= verb+
             | composed_monad
             | derived_verb
             | colon [colon]
             | n_colon

private separator ::= semicolon | newline
private separator_or_eof ::= separator | <<eof>>

group ::= open_paren E3 close_paren

user_id ::= user_identifier {
  mixin="plugin.psi.impl.QNamedElementImpl"
  implements="plugin.psi.QNamedElement"
  methods=[getName setName getNameIdentifier getPresentation]
 }

user_assignment_id ::= user_assignment {
  mixin="plugin.psi.impl.QNamedElementImpl"
  implements="plugin.psi.QNamedElement"
  methods=[getName setName getNameIdentifier getPresentation]
 }

private expression ::= whitespace* (signal | trace | assignment | dyad_fn | monad | noun)
private dyad_fn ::= (noun dyad [E3]) | (noun_or_fn [(dyad [E3]) | expression]) // projection
monad ::= monad_fn E3
private monad_fn ::= verb | derived_verb | n_colon | colon

private noun ::= vector | atom
private noun_or_fn ::= fn_call | user_fn_call | user_id | system_fn_call | system_identifier | fn_and_index_target [index+]

user_fn_call ::= user_id index+
system_fn_call ::= system_identifier index+

private fn_and_index_target ::= symbol | symbol_vector | string (whitespace)* (comma)* | lambda | list | group | table

private vector ::= symbol_vector | number_vector // string is not a vector-only noun b/c it can be indexed
private atom ::= number | char // symbol is not atomic-only b/c it can be indexed

table ::= open_paren index E1* close_paren
list ::= open_paren (([E3] separator [E3 | emptyIndex]) | emptyIndex separator (emptyIndex | E3))* close_paren
lambda ::= open_brace [index] E1* close_brace
private fn_call ::= (control | derived_verb | verb) index+
index ::= open_bracket E2* close_bracket
emptyIndex ::= open_bracket close_bracket
private control ::= (colon | if | do | while)

dyad ::= (infixNoIndex | infixIndex) [adverb]
private infixNoIndex ::= n_colon
private infixIndex ::= (verb | adverb | system_identifier | derived_verb) [index]

private assignment ::= global_assignment | local_assignment
global_assignment ::= (user_id | user_assignment_id) colon colon expression
local_assignment ::= (user_id | user_assignment_id) [index] (colon expression | composed_monad [expression])

signal ::= tick expression

trace ::= back_slash expression

command ::= command_name (user_id | "^")
